{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","defaultUrl.ts","types/ErrorEnum.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","renderSwitch","err","EMPTY","FIND","NONE","FindMovie","addMovie","useState","setQuery","typeOfError","setTypeOfError","isSubmitedForm","setSubmitedForm","setMovie","loadMoviesFromServer","useCallback","queryFromUser","a","trim","movieFromServer","Title","Plot","imdbID","Poster","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","onClick","App","setMovies","handleMovie","newMovie","prevMovies","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf079f1d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie?.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie?.description}\n        <br />\n        <a href={movie?.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=72d89670';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","export const FILM_URL = 'https://www.imdb.com/title';\n// eslint-disable-next-line max-len\nexport const DEFAULT_PICTURE = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n","export enum Error {\n  FIND = 'Can&apos;t find a movie with such a title',\n  EMPTY = 'Put the movie name',\n  NONE = '',\n}\n","import {\n  FC,\n  FormEvent,\n  useCallback,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\n\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { DEFAULT_PICTURE, FILM_URL } from '../../defaultUrl';\nimport { Error } from '../../types/ErrorEnum';\n\ninterface FindMovieProps {\n  addMovie: (movie: Movie) => void;\n}\n\nconst renderSwitch = (err: string) => {\n  switch (err) {\n    case Error.EMPTY:\n      return Error.EMPTY;\n    case Error.FIND:\n      return Error.FIND;\n    default:\n      return Error.NONE;\n  }\n};\n\nexport const FindMovie: FC<FindMovieProps> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [typeOfError, setTypeOfError] = useState(Error.NONE);\n  const [isSubmitedForm, setSubmitedForm] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n\n  const changeQuery = (queryFromUser: string) => {\n    setQuery(queryFromUser);\n    setTypeOfError(Error.NONE);\n  };\n\n  const loadMoviesFromServer = useCallback(async (queryFromUser) => {\n    if (!queryFromUser.trim()) {\n      setTypeOfError(Error.EMPTY);\n      setSubmitedForm(false);\n      setQuery('');\n\n      return;\n    }\n\n    const movieFromServer = await getMovie(queryFromUser);\n\n    if ('Error' in movieFromServer) {\n      setTypeOfError(Error.FIND);\n      setSubmitedForm(false);\n\n      return;\n    }\n\n    const {\n      Title,\n      Plot,\n      imdbID,\n      Poster,\n    } = movieFromServer;\n\n    setMovie({\n      title: Title,\n      description: Plot,\n      imgUrl: Poster === 'N/A' ? DEFAULT_PICTURE : Poster,\n      imdbUrl: `${FILM_URL}/${imdbID}`,\n      imdbId: imdbID,\n    });\n\n    setSubmitedForm(false);\n  }, []);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    setSubmitedForm(true);\n    loadMoviesFromServer(query);\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      addMovie(movie);\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => changeQuery(event.target.value)}\n            />\n          </div>\n\n          {typeOfError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {renderSwitch(typeOfError)}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isSubmitedForm,\n              })}\n              disabled={!query}\n            >\n              {movie\n                ? 'Search again'\n                : 'Find a movie'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleMovie = useCallback((newMovie: Movie) => {\n    setMovies(prevMovies => {\n      const isMovieInMovies = prevMovies.some(({ imdbId }) => (\n        imdbId === newMovie.imdbId));\n\n      return isMovieInMovies\n        ? prevMovies\n        : [...prevMovies, newMovie];\n    });\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={handleMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}